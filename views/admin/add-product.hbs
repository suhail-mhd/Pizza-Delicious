<main id="main" class="main">

  <div class="pagetitle">
    <h1>Add Product</h1>
    <nav>
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="index.html">Home</a></li>
        <li class="breadcrumb-item">Products</li>
        <li class="breadcrumb-item active">Add Products</li>
      </ol>
    </nav>
  </div><!-- End Page Title -->

  <section class="section">
    <div class="row">
      <div class="col-lg-12">

        <div class="card glass-blur">
          <div class="card-body">
            <h5 class="card-title ">Add Product</h5>

            <!-- General Form Elements -->
            <form
              action="/admin/add-product"
              method="post"
              enctype="multipart/form-data"
            >
              <div class="row mb-3">
                <div class="col-lg-6">
                  <label for="inputText" class="col-sm-12 col-form-label">Product
                    Name</label>
                  <div class="col-sm-10">
                    <input
                      type="text"
                      class=""
                      name="productname"
                      required
                    />
                  </div>
                </div>
                <div class="col-lg-6">
                  <div class="form-group">
                    <label
                      for="name"
                      class="col-sm-3 control-label"
                    >Category</label>
                    <div class="col-sm-9">
                      {{! <input type="text" class="" name="category" /> }}
                      <select
                        class="custom-select glass-blur"
                        id="category"
                        name="category"
                        style="border-radius: 20px;"
                      >
                        <option selected>Choose...</option>
                        {{#each listCategory}}
                          <option
                            value="{{this.catname}}"
                          >{{this.catname}}</option>
                        {{/each}}
                        required
                      </select>
                    </div>
                  </div>
                </div>
              </div>
              <div class="row mb-3">
                <div class="col-lg-6">
                  <label
                    for="inputNumber"
                    class="col-sm-12 col-form-label"
                  >Quantity</label>
                  <div class="col-sm-10">
                    <input type="number" name="quantity" class="" required/>
                  </div>
                </div>
                <div class="col-lg-6">
                  <label
                    for="inputNumber"
                    class="col-sm-12 col-form-label"
                  >Price</label>
                  <div class="col-sm-10">
                    <input type="tel" name="price" class="" required/>
                  </div>
                </div>
              </div>
              <div class="row mb-3">
                <label
                  for="inputPassword"
                  class="col-sm-12 col-form-label"
                >Description</label>
                <div class="col-sm-10">
                  <textarea
                    class="glass-blur"
                    style="height: 100px;width:100%"
                    name="description"
                    style="border-radius: 20px;"
                    required
                  ></textarea>
                </div>
              </div>
              <div class="mb-3">
                <label for="inputNumber" class="col-sm-2 col-form-label">
                  Image</label>
                <img src="" id="imgView1" alt="" style="width:100px" />
                <input
                  type="file"
                  id="id_image1"
                  name="Image"
                  accept="image/*"
                  onchange="viewImage1(event)"
                  required
                /><br />
                <div id="image-box1" class="image-container"></div>
              </div>
              <div class="mb-3">
                <div class="col-sm-10 ml-auto">
              <button class="btn btn-outline-info" id="crop-btn1" style="width: 100%; margin-top: 10px; display: none;"
              type="button">Crop</button>
                </div>
              </div>


              <div class="mb-3">
                <label for="inputNumber" class="col-sm-2 col-form-label">Sub
                  Image1</label>
                <img src="" id="imgView2" alt="" style="width:100px" />
                <input
                  type="file"
                  id="id_image2"
                  name="Image2"
                  accept="image/*"
                   onchange="viewImage2(event)"
                   required
                /><br />
                <div id="image-box2" class="image-container"></div>
              </div>
              <div class="mb-3">
                <div class="col-sm-10 ml-auto">
              <button class="btn btn-outline-info" id="crop-btn2" style="width: 100%; margin-top: 10px; display: none;"
              type="button">Crop</button>
                </div>
              </div>


              <div class="mb-3">
                <label for="inputNumber" class="col-sm-2 col-form-label">Sub
                  Image2</label>
                <img src="" id="imgView3" alt="" style="width:100px" />
                <input
                  type="file"
                  id="id_image3"
                  name="Image3"
                  accept="image/*"
                   onchange="viewImage3(event)"
                   required
                /><br />
                <div id="image-box3" class="image-container"></div>
              </div>
              <div class="mb-3">
                <div class="col-sm-10 ml-auto">
              <button class="btn btn-outline-info" id="crop-btn3" style="width: 100%; margin-top: 10px; display: none;"
              type="button">Crop</button>
                </div>
              </div>

              

              <div class="mb-3">
                <div class="col-sm-10 ml-auto">
                  <button type="submit" class="btn btn-primary">Add Product</button>
                </div>
              </div>

            </form><!-- End General Form Elements -->

          </div>
        </div>

      </div>

    </div>
  </section>

</main><!-- End #main -->

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>

<script>
  
  
  const imagebox1 = document.getElementById('image-box1')
  const imagebox2 = document.getElementById('image-box2')
  const imagebox3 = document.getElementById('image-box3')
  const crop_btn1 = document.getElementById('crop-btn1')
  const crop_btn2 = document.getElementById('crop-btn2')
  const crop_btn3 = document.getElementById('crop-btn3')
  const input1 = document.getElementById('id_image1')
  const input2 = document.getElementById('id_image2')
  const input3 = document.getElementById('id_image3')

   function viewImage1(event){
        document.getElementById('imgView1').src=URL.createObjectURL(event.target.files[0])
    }
   function viewImage2(event){
        document.getElementById('imgView2').src=URL.createObjectURL(event.target.files[0])
    }
   function viewImage3(event){
        document.getElementById('imgView3').src=URL.createObjectURL(event.target.files[0])
    }

  // When user uploads the image this event will get triggered
  input1.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data1 = input1.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url1 = URL.createObjectURL(img_data1)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image1 = document.getElementById('image1')
    
    // Displaying the image box
    document.getElementById('image-box1').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn1').style.display = 'block'
    // Hiding the Post button
    const cropper1 = new Cropper(image1, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 200,
      minCropBoxHeight: 200,
    })
    // When crop button is clicked this event will get triggered
    crop_btn1.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper1.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement1 = document.getElementById('id_image1');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container1 = new DataTransfer();
        // Add the cropped image file to the container
        container1.items.add(file1);
        // Replace the original image file with the new cropped image file
        fileInputElement1.files = container1.files;
        document.getElementById('imgView1').src= URL.createObjectURL(fileInputElement1.files[0])
        // Hide the cropper box
        document.getElementById('image-box1').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn1').style.display = 'none'
      })
    })
  })


  // When user uploads the image this event will get triggered
  input2.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data2 = input2.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url2 = URL.createObjectURL(img_data2)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image2 = document.getElementById('image2')
    
    // Displaying the image box
    document.getElementById('image-box2').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn2').style.display = 'block'
    // Hiding the Post button
    const cropper2 = new Cropper(image2, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 200,
      minCropBoxHeight: 200,
    })
    // When crop button is clicked this event will get triggered
    crop_btn2.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper2.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement2 = document.getElementById('id_image2');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container2 = new DataTransfer();
        // Add the cropped image file to the container
        container2.items.add(file2);
        // Replace the original image file with the new cropped image file
        fileInputElement2.files = container2.files;
        document.getElementById('imgView2').src= URL.createObjectURL(fileInputElement2.files[0])
        // Hide the cropper box
        document.getElementById('image-box2').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn2').style.display = 'none'
      })
    })
  })


  // When user uploads the image this event will get triggered
  input3.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data3 = input3.files[0]
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url3 = URL.createObjectURL(img_data3)
    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`
    // Storing that cropping view image in a variable
    const image3 = document.getElementById('image3')
    
    // Displaying the image box
    document.getElementById('image-box3').style.display = 'block'
    // Displaying the Crop buttton
    document.getElementById('crop-btn3').style.display = 'block'
    // Hiding the Post button
    const cropper3 = new Cropper(image3, {
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      minCropBoxWidth: 200,
      minCropBoxHeight: 200,
    })
    // When crop button is clicked this event will get triggered
    crop_btn3.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper3.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement3 = document.getElementById('id_image3');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
        // Create a new container
        let container3 = new DataTransfer();
        // Add the cropped image file to the container
        container3.items.add(file3);
        // Replace the original image file with the new cropped image file
        fileInputElement3.files = container3.files;
        document.getElementById('imgView3').src= URL.createObjectURL(fileInputElement3.files[0])
        // Hide the cropper box
        document.getElementById('image-box3').style.display = 'none'
        // Hide the crop button
        document.getElementById('crop-btn3').style.display = 'none'
      })
    })
  })
</script>